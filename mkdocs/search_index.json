{
    "docs": [
        {
            "location": "/", 
            "text": "uDisplay Documentation\n\n\nVersion:\n 0.1.0-dev\n\n\nAPI\n\n\n\n\nOverview\n\n\nEndpoints\n\n\nErrors\n\n\nChangelog\n\n\n\n\nBackend\n\n\n\n\nServer Setup \n Configurations\n\n\nCoding Rules\n\n\n\n\nNOTE:\n This documentation changes frequently, checkout the \nchangelog\n for detailed breaking changes and features added.\n\n\nWrite your documentation using \nMarkdown\n in \ndocs/\n folder. Need help? Read mkdocs \ndocumentation\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#udisplay-documentation", 
            "text": "Version:  0.1.0-dev", 
            "title": "uDisplay Documentation"
        }, 
        {
            "location": "/#api", 
            "text": "Overview  Endpoints  Errors  Changelog", 
            "title": "API"
        }, 
        {
            "location": "/#backend", 
            "text": "Server Setup   Configurations  Coding Rules   NOTE:  This documentation changes frequently, checkout the  changelog  for detailed breaking changes and features added.  Write your documentation using  Markdown  in  docs/  folder. Need help? Read mkdocs  documentation .", 
            "title": "Backend"
        }, 
        {
            "location": "/api/overview/", 
            "text": "This describes the resources that make up the official uDisplay API v1.\n\n\n\n\n\n\nCurrent Version\n\n\nSchema\n\n\nHTTP Verbs\n\n\nPagination\n\n\nRate Limit\n\n\nAuthorization\n\n\n\n\n\n\nCurrent Version\n\n\nBy default, all requests receive the \n1.0\n version of the API. We encourage you to explicitly request this version via the Accept header.\n\n\nAccept: application/json; version=1.0\n\n\n\n\nImportant:\n The default version of the API may change in the future. If you\nre building an application and care about the stability of the API, be sure to request a specific version in the \nAccept\n header as shown in the examples below.\n\n\nGET /bookings/ HTTP/1.1\nHost: example.com\nAccept: application/json; version=1.0\n\n\n\n\nSchema\n\n\nAll timestamps are returned in ISO 8601 format:\n\n\nYYYY-MM-DDTHH:MM:SSZ\n\n\nHTTP Verbs\n\n\nWhere possible, API v1 strives to use appropriate HTTP verbs for each action.\n\n\n\n\n\n\n\n\nVerb\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nHEAD\n\n\nCan be issued against any resource to get just the HTTP header info.\n\n\n\n\n\n\nGET\n\n\nUsed for retrieving resources.\n\n\n\n\n\n\nPOST\n\n\nUsed for creating resources, or performing custom actions (such as merging a pull request).\n\n\n\n\n\n\nPATCH\n\n\nUsed for updating resources with partial JSON data. For instance, an Issue resource has title and body attributes. A PATCH request may accept one or more of the attributes to update the resource. PATCH is a relatively new and uncommon HTTP verb, so resource endpoints also accept POST requests.\n\n\n\n\n\n\nPUT\n\n\nUsed for replacing resources or collections. For PUT requests with no body attribute, be sure to set the Content-Length header to zero.\n\n\n\n\n\n\nDELETE\n\n\nUsed for deleting resources.\n\n\n\n\n\n\n\n\nPagination\n\n\nRequests that return multiple items will be paginated to 30 items by default. You can specify further pages with the \n?page\n parameter. For some resources, you can also set a custom page size up to 1000 with the \n?per_page\n parameter.\n\n\nNote that page numbering is 1-based and that omitting the \n?page\n parameter will return the first page.\n\n\nRate Limit\n\n\nAll the unauthorized urls have a rate limit of 10,000 requests/day/IP. After exceeding the limit, you\nll get \nHTTP TOO MANY REQUESTS\n with status code \n429\n. When this happens you\nll also receive \nX-Throttle-Wait-Seconds: \ntime_in_sec\n header in response header.\n\n\nAuthorization\n\n\nTODO", 
            "title": "Overview & Usages"
        }, 
        {
            "location": "/api/overview/#current-version", 
            "text": "By default, all requests receive the  1.0  version of the API. We encourage you to explicitly request this version via the Accept header.  Accept: application/json; version=1.0  Important:  The default version of the API may change in the future. If you re building an application and care about the stability of the API, be sure to request a specific version in the  Accept  header as shown in the examples below.  GET /bookings/ HTTP/1.1\nHost: example.com\nAccept: application/json; version=1.0", 
            "title": "Current Version"
        }, 
        {
            "location": "/api/overview/#schema", 
            "text": "All timestamps are returned in ISO 8601 format:  YYYY-MM-DDTHH:MM:SSZ", 
            "title": "Schema"
        }, 
        {
            "location": "/api/overview/#http-verbs", 
            "text": "Where possible, API v1 strives to use appropriate HTTP verbs for each action.     Verb  Description      HEAD  Can be issued against any resource to get just the HTTP header info.    GET  Used for retrieving resources.    POST  Used for creating resources, or performing custom actions (such as merging a pull request).    PATCH  Used for updating resources with partial JSON data. For instance, an Issue resource has title and body attributes. A PATCH request may accept one or more of the attributes to update the resource. PATCH is a relatively new and uncommon HTTP verb, so resource endpoints also accept POST requests.    PUT  Used for replacing resources or collections. For PUT requests with no body attribute, be sure to set the Content-Length header to zero.    DELETE  Used for deleting resources.", 
            "title": "HTTP Verbs"
        }, 
        {
            "location": "/api/overview/#pagination", 
            "text": "Requests that return multiple items will be paginated to 30 items by default. You can specify further pages with the  ?page  parameter. For some resources, you can also set a custom page size up to 1000 with the  ?per_page  parameter.  Note that page numbering is 1-based and that omitting the  ?page  parameter will return the first page.", 
            "title": "Pagination"
        }, 
        {
            "location": "/api/overview/#rate-limit", 
            "text": "All the unauthorized urls have a rate limit of 10,000 requests/day/IP. After exceeding the limit, you ll get  HTTP TOO MANY REQUESTS  with status code  429 . When this happens you ll also receive  X-Throttle-Wait-Seconds:  time_in_sec  header in response header.", 
            "title": "Rate Limit"
        }, 
        {
            "location": "/api/overview/#authorization", 
            "text": "TODO", 
            "title": "Authorization"
        }, 
        {
            "location": "/api/endpoints/", 
            "text": "For api overview and usages, check out \nthis page\n.\n\n\n\n\n\n\nAuthentication\n\n\n\n\n\n\nAuthentication\n\n\nTODO", 
            "title": "REST Endpoints"
        }, 
        {
            "location": "/api/endpoints/#authentication", 
            "text": "TODO", 
            "title": "Authentication"
        }, 
        {
            "location": "/api/errors/", 
            "text": "Errors\n\n\nGeneric Errors\n\n\nThe \nstatus_code\n in response header complies with the standard http response headers. We expect developers to make use of them to display appropriate error dialogs.\n\n\nFor json requests, the API will return the error in the following format:\n\n\n{\n    \"_error_message\": \"short description of error message\",\n    \"_error_type\": \"clustr.exceptions.\"\n}\n\n\n\nValidation Errors\n\n\nFor \nPOST\n, \nPATCH\n, \nPUT\n \n \nDELETE\n methods, validation error may be raised. \n\n\nIt will return (Status: \n400 Bad Request\n). \n\n\nThe response body will contain json in the format same as Generic Error above with \n_error_message\n key or the key will contain the name of \nparameter\n that is invalid. For example, if you try to update \nemail\n which exceeds it\ns max-length of 255 and \nusername\n which contains invalid charaters. The error response body will of the format:\n\n\nStatus: 400 Bad Request\n\n\n\n\n{\n    \nemail\n: [\ncontains 300 characters, max. is 255.\n],\n    \nusername\n: [\nonly alphanumberic charaters with '_', '-' and '.' without spaces is allowed.\n, \ncontains 300 characters, max. is 255.\n],\n}\n\n\n\n\nFor displaying appropriate error message, the following algorithm can be used:\n\n\n\n# accepts optional \"field\" parameter\n-> Check if status_code is => 400\n-> If \"_error_message\" key is present in response, return it's value.\n-> Check if key \"field\" is present in the response body\n  -> Loop through all the array elements in it's value and construct the error message string.\n\n\n\n\nIn pseudo-function form:\n\n\ndef get_error_message(response_json, fields=[]):\n    '''Converts json error response to a string.\n    '''\n    error_string = response_json.get('_error_message', None)\n\n    if error_string:\n        return error_string\n\n    for field in fields:\n        field_errors = response_json.get(field)\n        if field_errors:\n            for error_msg in field_errors:\n                # modify as per requirement\n                error_string += field + \n- \n + error_msg + '\\n' \n\n    return error_string if error_string else \n\n\n\n\n\nExample:\n\n\ndata = {\n \nemail\n: \nverylongemail234234234234234234234234234234234@asdasdf.com\n,\n \nusername\n: \nverylongusernameagain_with_special_chars@%$\n\n}\n\nresponse = requests.post('http://example.com/api', data).json\nusername_error_msgs = get_error_message(response, ['username'])\n\nprint username_error_msgs\n# username - only alphanumberic charaters with '_', '-' and '.' without spaces is allowed.\n# username - contains 300 characters, max. is 255.\n\nall_errors = get_error_message(response, ['username', 'email'])\n\nprint all_errors\n# username - contains 300 characters, max. is 255.\n# username - only alphanumberic charaters with '_', '-' and '.' without spaces is allowed.\n# email - contains 300 characters, max. is 255.", 
            "title": "Errors"
        }, 
        {
            "location": "/api/errors/#errors", 
            "text": "", 
            "title": "Errors"
        }, 
        {
            "location": "/api/errors/#generic-errors", 
            "text": "The  status_code  in response header complies with the standard http response headers. We expect developers to make use of them to display appropriate error dialogs.  For json requests, the API will return the error in the following format:  {\n    \"_error_message\": \"short description of error message\",\n    \"_error_type\": \"clustr.exceptions.\"\n}", 
            "title": "Generic Errors"
        }, 
        {
            "location": "/api/errors/#validation-errors", 
            "text": "For  POST ,  PATCH ,  PUT     DELETE  methods, validation error may be raised.   It will return (Status:  400 Bad Request ).   The response body will contain json in the format same as Generic Error above with  _error_message  key or the key will contain the name of  parameter  that is invalid. For example, if you try to update  email  which exceeds it s max-length of 255 and  username  which contains invalid charaters. The error response body will of the format:  Status: 400 Bad Request  {\n     email : [ contains 300 characters, max. is 255. ],\n     username : [ only alphanumberic charaters with '_', '-' and '.' without spaces is allowed. ,  contains 300 characters, max. is 255. ],\n}  For displaying appropriate error message, the following algorithm can be used:  \n# accepts optional \"field\" parameter\n-> Check if status_code is => 400\n-> If \"_error_message\" key is present in response, return it's value.\n-> Check if key \"field\" is present in the response body\n  -> Loop through all the array elements in it's value and construct the error message string.  In pseudo-function form:  def get_error_message(response_json, fields=[]):\n    '''Converts json error response to a string.\n    '''\n    error_string = response_json.get('_error_message', None)\n\n    if error_string:\n        return error_string\n\n    for field in fields:\n        field_errors = response_json.get(field)\n        if field_errors:\n            for error_msg in field_errors:\n                # modify as per requirement\n                error_string += field +  -   + error_msg + '\\n' \n\n    return error_string if error_string else    Example:  data = {\n  email :  verylongemail234234234234234234234234234234234@asdasdf.com ,\n  username :  verylongusernameagain_with_special_chars@%$ \n}\n\nresponse = requests.post('http://example.com/api', data).json\nusername_error_msgs = get_error_message(response, ['username'])\n\nprint username_error_msgs\n# username - only alphanumberic charaters with '_', '-' and '.' without spaces is allowed.\n# username - contains 300 characters, max. is 255.\n\nall_errors = get_error_message(response, ['username', 'email'])\n\nprint all_errors\n# username - contains 300 characters, max. is 255.\n# username - only alphanumberic charaters with '_', '-' and '.' without spaces is allowed.\n# email - contains 300 characters, max. is 255.", 
            "title": "Validation Errors"
        }, 
        {
            "location": "/api/changelog/", 
            "text": ".container h1{font-size: 1.5em; }\n    .container h2{font-size: 1.2em; }\n    .container hr{margin-top: 5px; }\n\n\n\n\nDATE HERE\n\n\n\n\nadd changeset message here", 
            "title": "Changelog"
        }, 
        {
            "location": "/api/changelog/#date-here", 
            "text": "add changeset message here", 
            "title": "DATE HERE"
        }, 
        {
            "location": "/backend/server_config/", 
            "text": "Server Architecture and configurations\n\n\nThird Party Services\n\n\nFollowing third-party services are required in order to setup/deploy this project successfully.\n\n\nHeroku\n\n\nHeroku is platform as a service provider. We use to host the primarily web server along with different services required by this project like postgres database, newrelic, redis. See getting started docs \nhere\n, you\nll require to create an account and install the \ncli-tool\n to successfully deploy this project.\n\n\nNote: Alternatively, you should be able configure a linux instance to run the same project as well, heroku like settings can be added via \n.env\n file. (refer: \nsettings/common.py\n). Just that, this documentation and project is focused more with Heroku as platform of choice.\n\n\nAmazon S3\n\n\nAmazon Simple Storage Service (\nAmazon S3\n) is used to store the uploaded media files and static content. It is a scalable and cost-efficient storage solution. \n\n\nAfter \nsigning up\n for Amazon S3, \nsetup\n an IAM user with access to a S3 bucket, you\nll need \nBUCKET_NAME\n, and \nAWS_ACCESS_ID\n \n \nAWS_ACCESS_SECRET\n of IAM user to setup the project.\n\n\nNote: \n- Heroku doesn\nt provide a persistent storage for uploaded content, best practise is to store the uploaded files in S3 buckets.\n- IAM user must have permission to list, update, create objects in S3.\n\n\nDeploying Project\n\n\nThe deployment are managed via travis, but for the first time you\nll need to set the configuration values on each of the server. Read this only, if you need to deploy for the first time.\n\n\nHeroku\n\n\nRun these commands to deploy this project on Heroku (substitue all references of \nheroku-app-name\n with the name your heroku application.)\n\n\nheroku create --ssh-git \nheroku-app-name\n\n\nheroku addons:create heroku-postgresql --app=\nheroku-app-name\n\nheroku pg:backups schedule DATABASE_URL --at '04:00 UTC' --app=\nheroku-app-name\n\nheroku pg:promote DATABASE_URL --app=\nheroku-app-name\n\n\nheroku addons:create mailgun --app=\nheroku-app-name\n\nheroku config:set EMAIL_HOST=\n\\$MAILGUN_SMTP_SERVER\n \\\n                  EMAIL_HOST_USER=\n\\$MAILGUN_SMTP_LOGIN\n \\\n                  EMAIL_HOST_PASSWORD=\n\\$MAILGUN_SMTP_PASSWORD\n --app=\nheroku-app-name\n\n\nheroku addons:create redistogo --app=\nheroku-app-name\n\nheroku addons:create redismonitor --url `heroku config:get REDISTOGO_URL --app=\nheroku-app-name\n` --app=\nheroku-app-name\n\n\n\n\nheroku config:set DJANGO_SETTINGS_MODULE='settings.production' \\\nDJANGO_SECRET_KEY=`openssl rand -base64 32` \\\nSITE_DOMAIN=\nheroku-app-name\n.herokuapp.com \\\nSITE_SCHEME=https \\\nSITE_NAME=DJANGO_SITE_NAME_HERE --app=\nheroku-app-name\n\n\ngit push heroku master\nheroku run python manage.py createsuperuser --app=\nheroku-app-name\n\nheroku open --app=\nheroku-app-name\n\n\n\n\n\nThe following configuration doesn\nt allow you to \nby default\n upload the media on the heroku server as heroku does\nnot support persistent storage. We use S3 for storing uploaded media. If you want to enable media upload:\n\n\n\n\nCreate S3 bucket and get AWS access key and secret that has access to this bucket.\n\n\nFollow the instructions below to enable S3 upload configuration on heroku.\n\n\n\n\nheroku config:set ENABLE_MEDIA_UPLOAD_TO_S3=true \\\nDJANGO_AWS_ACCESS_KEY_ID=\nYOUR_AWS_ACCESS_ID_HERE\n \\\nDJANGO_AWS_SECRET_ACCESS_KEY=\nYOUR_SECRET_KEY_HERE\n \\\nDJANGO_AWS_STORAGE_BUCKET_NAME=\nYOUR_BUCKET_NAME_HERE\n\n\n\n\n\nNote:\n\n- Use \n--app=\nheroku-app-name\n if you have more than one heroku app configured in current project.\n- Update \ntravis.yml\n, and add the \nheroku-app-name\n to automatically deploy to this configured heroku app.\n\n\nAWS/EC2\n\n\nFor deploying on aws you need to configure all the addons provided and use python-dotenv to store and read enironment variables.\n\n\nAdd the following to your \n~/.ssh/config\n file.\n\n\nHost udisplay.com\n    hostname \nserver_ip_or_\n\n    user ubuntu\n    ForwardAgent yes\n    identityfile \nPATH_OF_SERVER_PRIVATE_KEY_HERE\n\n\n\n\n\nAdd your github private key to your local ssh-agent, which will be used by ansible on remote server to fetch the code using \nForwardAgent\n\n\nssh-add \nPATH_TO_YOUR_GITHUB_PRIVATE_KEY\n\n\n\n\nNow you can run the ansible script to setup the machine.\n\n\nfab prod configure\n\n\n\nThis will setup os dependencies, services like supervisor, nginx and fetch our code from github. Our production environment requires \nsome environment variables in \n.env\n. So you can write a file \nprod.env\n locally and upload it to server with\n\n\nscp prod.env udisplay.com:/home/ubuntu/uDisplay/.env\n\n\n\nYou can also use fab to set environment variables one by one:\n\n\nfab prod config:set,\nVAR_NAME\n,\nVAR_VALUE\n\n\n\n\nNow that you have \n.env\n setup, you can deploy your code and start services:\n\n\nfab prod deploy", 
            "title": "Server Configurations"
        }, 
        {
            "location": "/backend/server_config/#server-architecture-and-configurations", 
            "text": "", 
            "title": "Server Architecture and configurations"
        }, 
        {
            "location": "/backend/server_config/#third-party-services", 
            "text": "Following third-party services are required in order to setup/deploy this project successfully.", 
            "title": "Third Party Services"
        }, 
        {
            "location": "/backend/server_config/#heroku", 
            "text": "Heroku is platform as a service provider. We use to host the primarily web server along with different services required by this project like postgres database, newrelic, redis. See getting started docs  here , you ll require to create an account and install the  cli-tool  to successfully deploy this project.  Note: Alternatively, you should be able configure a linux instance to run the same project as well, heroku like settings can be added via  .env  file. (refer:  settings/common.py ). Just that, this documentation and project is focused more with Heroku as platform of choice.", 
            "title": "Heroku"
        }, 
        {
            "location": "/backend/server_config/#amazon-s3", 
            "text": "Amazon Simple Storage Service ( Amazon S3 ) is used to store the uploaded media files and static content. It is a scalable and cost-efficient storage solution.   After  signing up  for Amazon S3,  setup  an IAM user with access to a S3 bucket, you ll need  BUCKET_NAME , and  AWS_ACCESS_ID     AWS_ACCESS_SECRET  of IAM user to setup the project.  Note: \n- Heroku doesn t provide a persistent storage for uploaded content, best practise is to store the uploaded files in S3 buckets.\n- IAM user must have permission to list, update, create objects in S3.", 
            "title": "Amazon S3"
        }, 
        {
            "location": "/backend/server_config/#deploying-project", 
            "text": "The deployment are managed via travis, but for the first time you ll need to set the configuration values on each of the server. Read this only, if you need to deploy for the first time.", 
            "title": "Deploying Project"
        }, 
        {
            "location": "/backend/server_config/#heroku_1", 
            "text": "Run these commands to deploy this project on Heroku (substitue all references of  heroku-app-name  with the name your heroku application.)  heroku create --ssh-git  heroku-app-name \n\nheroku addons:create heroku-postgresql --app= heroku-app-name \nheroku pg:backups schedule DATABASE_URL --at '04:00 UTC' --app= heroku-app-name \nheroku pg:promote DATABASE_URL --app= heroku-app-name \n\nheroku addons:create mailgun --app= heroku-app-name \nheroku config:set EMAIL_HOST= \\$MAILGUN_SMTP_SERVER  \\\n                  EMAIL_HOST_USER= \\$MAILGUN_SMTP_LOGIN  \\\n                  EMAIL_HOST_PASSWORD= \\$MAILGUN_SMTP_PASSWORD  --app= heroku-app-name \n\nheroku addons:create redistogo --app= heroku-app-name \nheroku addons:create redismonitor --url `heroku config:get REDISTOGO_URL --app= heroku-app-name ` --app= heroku-app-name \n\n\n\nheroku config:set DJANGO_SETTINGS_MODULE='settings.production' \\\nDJANGO_SECRET_KEY=`openssl rand -base64 32` \\\nSITE_DOMAIN= heroku-app-name .herokuapp.com \\\nSITE_SCHEME=https \\\nSITE_NAME=DJANGO_SITE_NAME_HERE --app= heroku-app-name \n\ngit push heroku master\nheroku run python manage.py createsuperuser --app= heroku-app-name \nheroku open --app= heroku-app-name   The following configuration doesn t allow you to  by default  upload the media on the heroku server as heroku does\nnot support persistent storage. We use S3 for storing uploaded media. If you want to enable media upload:   Create S3 bucket and get AWS access key and secret that has access to this bucket.  Follow the instructions below to enable S3 upload configuration on heroku.   heroku config:set ENABLE_MEDIA_UPLOAD_TO_S3=true \\\nDJANGO_AWS_ACCESS_KEY_ID= YOUR_AWS_ACCESS_ID_HERE  \\\nDJANGO_AWS_SECRET_ACCESS_KEY= YOUR_SECRET_KEY_HERE  \\\nDJANGO_AWS_STORAGE_BUCKET_NAME= YOUR_BUCKET_NAME_HERE   Note: \n- Use  --app= heroku-app-name  if you have more than one heroku app configured in current project.\n- Update  travis.yml , and add the  heroku-app-name  to automatically deploy to this configured heroku app.", 
            "title": "Heroku"
        }, 
        {
            "location": "/backend/server_config/#awsec2", 
            "text": "For deploying on aws you need to configure all the addons provided and use python-dotenv to store and read enironment variables.  Add the following to your  ~/.ssh/config  file.  Host udisplay.com\n    hostname  server_ip_or_ \n    user ubuntu\n    ForwardAgent yes\n    identityfile  PATH_OF_SERVER_PRIVATE_KEY_HERE   Add your github private key to your local ssh-agent, which will be used by ansible on remote server to fetch the code using  ForwardAgent  ssh-add  PATH_TO_YOUR_GITHUB_PRIVATE_KEY   Now you can run the ansible script to setup the machine.  fab prod configure  This will setup os dependencies, services like supervisor, nginx and fetch our code from github. Our production environment requires \nsome environment variables in  .env . So you can write a file  prod.env  locally and upload it to server with  scp prod.env udisplay.com:/home/ubuntu/uDisplay/.env  You can also use fab to set environment variables one by one:  fab prod config:set, VAR_NAME , VAR_VALUE   Now that you have  .env  setup, you can deploy your code and start services:  fab prod deploy", 
            "title": "AWS/EC2"
        }, 
        {
            "location": "/backend/coding_rules/", 
            "text": "Conventions\n\n\n\n\nRead and pay attention to current code in the repository\n\n\nFor the Python part, we follow pep8 in most cases. We use \nflake8\n to check for linting errors. Once you\nre ready to commit changes, check your code with \nflake8\n.\n\n\nInstall a plugin for \nEditorConfig\n and let it handle some of the formating issues for you.\n\n\nFor the Django part, we follow standard \nDjango coding style\n.\n\n\nAnd always remember the Zen.\n\n\n\n\nCoding Rules\n\n\nDjango models\n\n\n\n\nAll model names in singular an CamelCase.\n\n\nAll models have a \nMeta\n with at least:\n\n\nverbose_name\n and \nverbose_name_plural\n: unicode strings, lowercase, with spaces.\n\n\nordering\n: return a consistent order, using pk if no other unique field or combination exists.\n\n\n\n\n\n\nAll models have \n__unicode__\n method, returning a human-readable, descriptive, short text.\n\n\nAll fields have \nverbose_name\n. Also \nhelp_text\n if needed to fully explain the field meaning.\n\n\n\n\nAll fields have explicit \nblank\n and \nnull\n parameters. Use only those combinations, unless there a documented need of other thing:\n\n\nNormal fields\n (IntegerField, DateField, ForeignKey, FileField\n)\n\n  - (optional) \nnull = True\n, \nblank = True\n\n  - (required) \nnull = False\n, \nblank = False\n\n\nText fields\n (CharField, TextField, URLField\n)\n\n  - (optional) \nnull = False\n, \nblank = True\n\n  - (required) \nnull = False\n, \nblank = False\n\n\nBoolean fields\n:\n\n  - (two values, T/F) \nnull = False\n, \nblank = True\n\n  - (three values, T/F/Null) \nnull = True\n, \nblank = True\n  \n\n\n\n\n\n\nDon\nt create text fields with \nnull = True\n, unless you need to distinguish between empty string and \nNone\n.\n\n\n\n\nDon\nt create boolean fields with \nblank = False\n, otherwise they could only be \nTrue\n.\n\n\n\n\nExample:\n\n\nclass SomeClass(models.Model):\n    name = models.CharField(max_length=100, null = False, blank = False, unique=True,\n               verbose_name = _(u'name'))\n    slug = models.SlugField(max_length=100, null = False, blank = False, unique=True,\n               verbose_name = _(u'slug'),\n               help_text = (u'Identifier of this object. Only letters, digits and underscore \n_\n allowed.'))\n    text = models.TextField(null = False, blank = True,\n               verbose_name = _(u'text'))\n\n    class Meta:\n        verbose_name = _(u'some class')\n        verbose_name_plural = _(u'some classes')\n        ordering = ['name']\n\n    def __unicode__(self):\n        return self.name", 
            "title": "Coding Rules"
        }, 
        {
            "location": "/backend/coding_rules/#conventions", 
            "text": "Read and pay attention to current code in the repository  For the Python part, we follow pep8 in most cases. We use  flake8  to check for linting errors. Once you re ready to commit changes, check your code with  flake8 .  Install a plugin for  EditorConfig  and let it handle some of the formating issues for you.  For the Django part, we follow standard  Django coding style .  And always remember the Zen.", 
            "title": "Conventions"
        }, 
        {
            "location": "/backend/coding_rules/#coding-rules", 
            "text": "", 
            "title": "Coding Rules"
        }, 
        {
            "location": "/backend/coding_rules/#django-models", 
            "text": "All model names in singular an CamelCase.  All models have a  Meta  with at least:  verbose_name  and  verbose_name_plural : unicode strings, lowercase, with spaces.  ordering : return a consistent order, using pk if no other unique field or combination exists.    All models have  __unicode__  method, returning a human-readable, descriptive, short text.  All fields have  verbose_name . Also  help_text  if needed to fully explain the field meaning.   All fields have explicit  blank  and  null  parameters. Use only those combinations, unless there a documented need of other thing:  Normal fields  (IntegerField, DateField, ForeignKey, FileField ) \n  - (optional)  null = True ,  blank = True \n  - (required)  null = False ,  blank = False  Text fields  (CharField, TextField, URLField ) \n  - (optional)  null = False ,  blank = True \n  - (required)  null = False ,  blank = False  Boolean fields : \n  - (two values, T/F)  null = False ,  blank = True \n  - (three values, T/F/Null)  null = True ,  blank = True       Don t create text fields with  null = True , unless you need to distinguish between empty string and  None .   Don t create boolean fields with  blank = False , otherwise they could only be  True .   Example:  class SomeClass(models.Model):\n    name = models.CharField(max_length=100, null = False, blank = False, unique=True,\n               verbose_name = _(u'name'))\n    slug = models.SlugField(max_length=100, null = False, blank = False, unique=True,\n               verbose_name = _(u'slug'),\n               help_text = (u'Identifier of this object. Only letters, digits and underscore  _  allowed.'))\n    text = models.TextField(null = False, blank = True,\n               verbose_name = _(u'text'))\n\n    class Meta:\n        verbose_name = _(u'some class')\n        verbose_name_plural = _(u'some classes')\n        ordering = ['name']\n\n    def __unicode__(self):\n        return self.name", 
            "title": "Django models"
        }, 
        {
            "location": "/release_notes/", 
            "text": "Release Notes\n\n\n0.1.0-dev\n\n\nDate:\n \nUnder Developement\n\n\nFeatures\n\n\n\n\n\n\ninitial setup of project.\n\n\n\n\nFixes", 
            "title": "Release Notes"
        }, 
        {
            "location": "/release_notes/#release-notes", 
            "text": "", 
            "title": "Release Notes"
        }, 
        {
            "location": "/release_notes/#010-dev", 
            "text": "Date:   Under Developement  Features    initial setup of project.   Fixes", 
            "title": "0.1.0-dev"
        }
    ]
}